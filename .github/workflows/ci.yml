# On push: build latest images and run examples
# On push to tag: build versioned images, publish to chrisstore.co and cube.chrisproject.org

name: build

on:
  push:
    branches: [ master ]
    tags:
      - "v?[0-9]+.[0-9]+.[0-9]+*"
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build
    if: github.event_name == 'push' || github.event_name == 'release'
    runs-on: ubuntu-22.04

    # A local registry helps us reuse the built image between steps
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - name: Get git tag
        id: git_info
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "tag=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
      - name: Get project info
        id: determine
        env:
          git_tag: ${{ steps.git_info.outputs.tag }}
        run: |
          repo="${GITHUB_REPOSITORY,,}"  # to lower case
          # if build triggered by tag, use tag name
          tag="${git_tag:-latest}"
          # if tag is a version number prefixed by 'v', remove the 'v'
          if [[ "$tag" =~ ^v[0-9].* ]]; then
            tag="${tag:1}"
          fi
          dock_image=$repo:$tag
          echo $dock_image
          echo "dock_image=$dock_image" >> $GITHUB_OUTPUT
          echo "repo=$repo" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
        # QEMU is used for non-x86_64 builds
      - uses: docker/setup-qemu-action@v2
        # buildx adds additional features to docker build
      - uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host
        # cache slightly improves rebuild time
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        id: dockerhub_login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        id: docker_build
        with:
          context: .
          file: ./Dockerfile
          tags: |
            localhost:5000/${{ steps.determine.outputs.dock_image }}
            docker.io/${{ steps.determine.outputs.dock_image }}
            ghcr.io/${{ steps.determine.outputs.dock_image }}
          platforms: linux/amd64,linux/arm/v7,linux/arm64/v8
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          build-args: |
            CARGO_TERM_COLOR=always
      - name: Update DockerHub description
        uses: peter-evans/dockerhub-description@v3
        continue-on-error: true  # it is not crucial that this works
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          short-description: ${{ steps.pluginmeta.outputs.title }}
          readme-filepath: ./README.md
          repository: ${{ steps.determine.outputs.repo }}

      - name: Run examples
        run: |
          dock_image=${{ steps.determine.outputs.dock_image }}
          output_dir=$(mktemp -d)
          docker run --rm -u "$(id -u):$(id -g)" \
            -v "$PWD/examples/incoming:/incoming:ro" \
            -v "$output_dir:/outgoing:rw" \
            localhost:5000/$dock_image abs /incoming /outgoing
          
          for expected_file in $(find examples/outgoing -type f); do
            fname="${expected_file##*/}"
            out_path="$output_dir/$fname"
            printf "Checking output %s exists..." "$out_path"
            if [ -f "$out_path" ]; then
              echo "ok"
            else
              echo "not found"
              exit 1
            fi
          done

      - name: Upload to ChRIS Store
        if: steps.git_info.outcome != 'skipped'
        uses: FNNDSC/chrisstore-action@master
        with:
          descriptor_file: chris_plugin_info.json
          auth: ${{ secrets.CHRIS_STORE_USER }}
          chris_admin_auth: ${{ secrets.CUBE_CHRISPROJECT_ORG_ADMIN_USER }}
          chris_admin_url: https://cube.chrisproject.org/chris-admin/api/v1/
          compute_resources: host
